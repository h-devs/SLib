/*
 *   Copyright (c) 2008-2018 SLIBIO <https://github.com/SLIBIO>
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *   THE SOFTWARE.
 */

namespace slib
{

	extern template class SpinLockPool<-10>;
	typedef SpinLockPool<-10> SpinLockPoolForBase;

	extern template class SpinLockPool<-11>;
	typedef SpinLockPool<-11> SpinLockPoolForWeakRef;

	extern template class SpinLockPool<-12>;
	typedef SpinLockPool<-12> SpinLockPoolForFunction;

	extern template class SpinLockPool<-20>;
	typedef SpinLockPool<-20> SpinLockPoolForList;
	
	extern template class SpinLockPool<-21>;
	typedef SpinLockPool<-21> SpinLockPoolForMap;

	extern template class SpinLockPool<-30>;
	typedef SpinLockPool<-30> SpinLockPoolForVariant;

	template <int CATEGORY>
	sl_int32 SpinLockPool<CATEGORY>::m_locks[SLIB_SPINLOCK_POOL_SIZE] = { 0 };
	
	template <int CATEGORY>
	SLIB_INLINE SpinLock* SpinLockPool<CATEGORY>::get(const void* _ptr) noexcept
	{
		sl_size index = ((sl_size)(_ptr)) % SLIB_SPINLOCK_POOL_SIZE;
		return reinterpret_cast<SpinLock*>(m_locks + index);
	}

}
